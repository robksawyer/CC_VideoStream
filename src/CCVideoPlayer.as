package {		/* ****************************************************** *\	* 	CHINCHILLAX FLASH VIDEO PLAYER	* 		* 	Preview/Generator:	* 	  http://www.chinchillax.com/shop/videostream/	* 		* 	Source/Code:	* 	  https://github.com/robksawyer/CC_VideoStream	* 		* 	Problems/Issues:	* 	  https://github.com/robksawyer/CC_VideoStream/issues	* 		* 	Feature request:	* 	  https://github.com/robksawyer/CC_VideoStream/labels/feature	* 		* 	Optimized and Updated To Work With VJ Applications:	* 		Rob Sawyer	*			http://www.chinchillax.com/team	*				*		Original Author:	* 	  Martin Bommeli	* 	  http://www.flashjunior.ch	* 		* 	Original graphics and some part of codes:	* 	  Abdulhalim Kara	* 	  http://www.abdulhalimkara.com/	*	*	* 	Special thanks to:	* 	  Abdulhalim Kara (www.abdulhalimkara.com) for help, some codes and very nice skin	* 	  Florian Weil (www.derhess.de) for his youtube classes	* 	  DIVIO (www.divio.ch) for given time	*	\* ****************************************************** */		import flash.net.SharedObject;	import flash.system.Security;		import flash.display.MovieClip;	import flash.events.Event;	import flash.external.ExternalInterface;	import com.moogaloop.VimeoPlayer;			import com.gskinner.utils.StringUtils;		import com.fj.utils.StopDragButton;	import com.fj.video.VideoPlayer;	import flash.utils.Timer;	import flash.events.TimerEvent;		import com.demonsters.debugger.MonsterDebugger;	//import the Resolume communication classes	//make sure you have added the source path to these files in the ActionScript 3 Preferences of Flash	import resolumeCom.*;	import resolumeCom.parameters.*;	import resolumeCom.events.*;	//Chinchillax classes	//	import com.chinchillax.events.SoftwareDispatcher;	public class CCVideoPlayer extends MovieClip{		/*****************PRIVATE********************/		//create the resolume object that will do all the hard work for you		private var resolume:Resolume = new Resolume();				private var resDispatcher:SoftwareDispatcher = new SoftwareDispatcher();		/*****************RESOLUME PARAMS********************/				private var paramVideoSource:StringParameter = resolume.addStringParameter("Video Source", "http://www.youtube.com/v/XrPNl_gZlvY");		private var paramAutoPlay:BooleanParameter = resolume.addBooleanParameter("Auto Play", true); 		private var paramAutoHide:BooleanParameter = resolume.addBooleanParameter("Auto Hide Ctrls", false); 		private var paramVideoLoop:BooleanParameter = resolume.addBooleanParameter("Video Loop", true); 				private var trimInPoint:FloatParameter = resolume.addFloatParameter("Set In Point", 0.0);		private var trimOutPoint:FloatParameter = resolume.addFloatParameter("Set Out Point", 1.0);		private var theScrubber:FloatParameter = resolume.addFloatParameter("Scrub", 0.0);				private var thePause:EventParameter = resolume.addEventParameter("Play/Pause");		private var paramSwitchVideo:EventParameter = resolume.addEventParameter("Update Video"); //A button to update the video				private var theVolume:FloatParameter = resolume.addFloatParameter("Volume", 0.0);				/*****************RESOLUME PARAMS********************/				private var videoMovie:*;		private var videoPaused:Boolean = false;		public var playheadTimer:Timer;		/*****************PUBLIC********************/				public static var videoSrc : String;		public static var imgSrc : String;				public static var fullscreenMode : String;		public static var videoLoop : String;		public static var autohide : String;				public static var autoplay : String;				public static var seekbarColor:String;		public static var seekbarbgColor:String;		public static var loadingbarColor:String;		public static var textColor:String;				public static var btnOutColor:String;		public static var btnOverColor:String;		public static var btnHighlightColor:String;		private var sharedObj : SharedObject;		/**		*		* Constructor		*		**/		public function CCVideoPlayer(){			//set callback, this will notify us when a parameter has changed			resolume.addParameterListener(parameterChanged);						Security.allowDomain("www.youtube.com");			Security.allowDomain("s.ytimg.com");						if(loaderInfo.bytesLoaded >= loaderInfo.bytesTotal){				init();			}else{				loaderInfo.addEventListener(Event.COMPLETE, init, false, 0, true);			}		}				/**		*		* The video player setup		* @param e:Event		* @return void		**/		private function init(e:Event = null):void{			Security.allowDomain("*");						// Start the MonsterDebugger			MonsterDebugger.initialize(this);			MonsterDebugger.enabled = true;			MonsterDebugger.clear();						MonsterDebugger.trace(this, "CCVideoPlayer - init");						sharedObj = SharedObject.getLocal("osvideoplayervolumelevel");			loaderInfo.removeEventListener(Event.COMPLETE, init);			addEventListener(Event.ADDED_TO_STAGE, initPlayer);			//			//Custom event that was added to handle a VJ app change of the video source			//Fired when the user presses the "Update Video" button in the app.			//			resDispatcher.addEventListener(SoftwareDispatcher.UPDATE_VIDEO, initPlayer);		}				/**		*		* The initialize method for the video player functions/elements.		* @param e:Event 		* @return void		*		**/		private function initPlayer(e:Event):void{			removeEventListener(Event.ADDED_TO_STAGE, initPlayer);				stage.scaleMode = flash.display.StageScaleMode.NO_SCALE;			stage.align = flash.display.StageAlign.TOP_LEFT;						VideoPlayer.STAGE = StopDragButton.STAGE = stage;						imgSrc 						= stage.loaderInfo.parameters["image"];			videoSrc 					= stage.loaderInfo.parameters["movie"];			videoLoop 				= stage.loaderInfo.parameters["loop"];			fullscreenMode 		= stage.loaderInfo.parameters["fullscreen"];			autohide 					= stage.loaderInfo.parameters["autohide"];			autoplay 					= stage.loaderInfo.parameters["autoplay"];			seekbarColor 			= stage.loaderInfo.parameters["color_seekbar"];			seekbarbgColor 		= stage.loaderInfo.parameters["color_seekbarbg"];			loadingbarColor 	= stage.loaderInfo.parameters["color_loadingbar"];			textColor 				= stage.loaderInfo.parameters["color_text"];			btnOutColor 			= stage.loaderInfo.parameters["color_button_out"];			btnOverColor 			= stage.loaderInfo.parameters["color_button_over"];			btnHighlightColor = stage.loaderInfo.parameters["color_button_highlight"];						//!videoSrc ? videoSrc = "http://www.flashjunior.ch/archiv/flvplayer/movies/kuga.mp4" : videoSrc = videoSrc;			//TEST flv 			!videoSrc ? videoSrc = "http://www.flashjunior.ch/archiv/flvplayer/movies/sad.flv" : videoSrc = videoSrc;			//TEST youtube 1 	!videoSrc ? videoSrc = "http://www.youtube.com/watch?v=YFa59lK-kpo" : videoSrc = videoSrc;			//TEST youtube 2 				videoSrc = this.paramVideoSource.getValue().toString();			//TEST youtube 3 	!videoSrc ? videoSrc = "http://www.youtube.com/v/XrPNl_gZlvYYYYYY" : videoSrc = videoSrc;			//TEST vimeo 1 		!videoSrc ? videoSrc = "http://vimeo.com/7917744" : videoSrc = videoSrc;			//TEST vimeo 2		!videoSrc ? videoSrc = "http://www.vimeo.com/3740633" : videoSrc = videoSrc;						!imgSrc ? imgSrc = "" : imgSrc = imgSrc;			//TEST				!imgSrc ? imgSrc = "http://www.flashjunior.ch/archiv/flvplayer/2/vorschau.jpg" : imgSrc = imgSrc;									!autohide ? autohide = paramAutoHide.getValue().toString() : autohide = autohide;			!autoplay ? autoplay = paramAutoPlay.getValue().toString() : autoplay = autoplay;			!videoLoop ? videoLoop = paramVideoLoop.getValue().toString() : videoLoop = videoLoop;						!fullscreenMode ? fullscreenMode = "false" : fullscreenMode = fullscreenMode;						!seekbarColor ? seekbarColor = "0xf6f6f6" : seekbarColor = seekbarColor;			!seekbarbgColor ? seekbarbgColor = "0x231f20" : seekbarbgColor = seekbarbgColor;			!loadingbarColor ? loadingbarColor = "0xe1e1e1" : loadingbarColor = loadingbarColor;			!textColor ? textColor = "0xffffff" : textColor = textColor;			!btnOutColor ? btnOutColor = "0x6d6d6d" : btnOutColor = btnOutColor;			!btnOverColor ? btnOverColor = "0x000000" : btnOverColor = btnOverColor;			!btnHighlightColor ? btnHighlightColor = "0x6d6d6d" : btnHighlightColor = btnHighlightColor;			if(autoplay)			{				videoPaused = false;			}			else			{				videoPaused = true;			}			var regex:RegExp;			var regexResult:*;						if(StringUtils.contains(videoSrc, "youtube.com"))			{				regex = RegExp("http://www.youtube.com/v/(.+?)(\&.*|$)");				regexResult = regex.exec(videoSrc);				var youtubeCheck:Boolean = false;								if(regexResult)				{					videoSrc = regexResult[1].toString();					youtubeCheck = true;				}				else				{					regex = /youtube\.com\/watch\?v=([^&\/]+)/;					regexResult = regex.exec(videoSrc);					if(regexResult)					{						videoSrc = regexResult[1].toString();						youtubeCheck = true;					}				}								videoMovie = new VideoPlayer(videoSrc, "youtube");							} 			else if(StringUtils.contains(videoSrc, "vimeo.com"))			{				regex = RegExp("vimeo.com/(.+?)(\&.*|$)");				regexResult = regex.exec(videoSrc);				var vimeoCheck:Boolean = false;				if(regexResult)				{					videoSrc = regexResult[1].toString();					vimeoCheck = true;				}								if(fullscreenMode == "true")				{					fullscreenMode = "1";				}				else				{					fullscreenMode = "0";				}								videoMovie = new VimeoPlayer(int(videoSrc), stage.stageWidth, stage.stageHeight, Number(fullscreenMode));				videoMovie.addEventListener(Event.COMPLETE, handleVimeoPlayerReady);			} 			else			{				videoMovie = new VideoPlayer(videoSrc, "normal");			}						addChild(videoMovie);			//start playhead timer to check the playhead position			playheadTimer = new Timer(100);			playheadTimer.addEventListener(TimerEvent.TIMER, checkPlayHead);			playheadTimer.start();      if(ExternalInterface.available) ExternalInterface.addCallback("getVideoTimeData", getTimeData);			if(ExternalInterface.available) ExternalInterface.call("onVideoPlayerInited");		}		/**		*		* Called everytime you change a paramater in Resolume.		* @param event:ChangeEvent		* @return void		* 		**/		public function parameterChanged( event:ChangeEvent ): void {			//check to see what paramater was changed			switch(event.object)			{				case this.paramVideoSource:					videoSrc = this.paramVideoSource.getValue();					break;				case this.paramAutoPlay:					autoplay = this.paramAutoPlay.getValue() == 1 ? "true" : "false";					break;				case this.paramAutoHide:					autohide = this.paramAutoHide.getValue() == 1 ? "true" : "false";					if(videoMovie != undefined)					{						//Reinitialize the movie						videoMovie.init();						videoMovie.initTrimPoints();					}					break;										case this.paramSwitchVideo:					MonsterDebugger.trace(this, "Switching video!", "Param");					//Using the custom dispatcher, eventually dispatches an event 					//that fires initPlayer					resDispatcher.updateVideo();					break;									case this.trimInPoint:					MonsterDebugger.trace(this, "Setting trim in point: " + this.trimInPoint.getValue(), "Param");					if(videoMovie != undefined)					{						videoMovie.trimInPoint = this.trimInPoint.getValue();					}					break;										case this.trimOutPoint:					MonsterDebugger.trace(this, "Setting trim out point: " + this.trimOutPoint.getValue(), "Param");					if(videoMovie != undefined)					{						videoMovie.trimOutPoint = this.trimOutPoint.getValue();					}					break;									case this.theScrubber:					if(videoMovie != undefined)					{						videoMovie.scrubPoint = this.theScrubber.getValue();					}					break;				case this.thePause:					if(videoMovie != undefined)					{						MonsterDebugger.trace(this, "Video Paused: " + videoPaused, "Param");						if(videoPaused)						{							videoMovie.pauseVideo();							this.videoPaused = true;							//Pause the playhead timer							MonsterDebugger.trace(this, "playheadTimer Pausing", "Param");							if(playheadTimer)							{								playheadTimer.stop();							}						}						else						{							videoMovie.playVideo();							this.videoPaused = false;							MonsterDebugger.trace(this, "playheadTimer Playing", "Param");							if(playheadTimer)							{								playheadTimer.start();							}						}					}					break;									case this.theVolume:					if(videoMovie != undefined)					{						videoMovie.volume = this.theVolume.getValue();						MonsterDebugger.trace(this, "Updated Volume: " + videoMovie.volume, "Param");					}					break;								default:					MonsterDebugger.trace(this, event.object);					break;			}				}				/**		*		* Handles when the READY event of the Vimeo player		* @param e:Event		* @return void		* 		**/		private function handleVimeoPlayerReady(e:Event):void{			if(autoplay == "true"){ videoMovie.play(); }						videoMovie.changeColor(seekbarColor.substr(2));						var p_n:Number;			if(videoLoop=="false"){				p_n = 0;			}else{				p_n = 1;			}						if(sharedObj.data.volume == undefined){				sharedObj.data.volume = 100;			}						videoMovie.setLoop(p_n);			videoMovie.setVolume(Number(sharedObj.data.volume));					}		/**		* Check to see if the video is at the "end"		* if so, go to in-point		* @param e:TimerEvent		* @return void		*/		private function checkPlayHead(e:TimerEvent):void		{			if(videoMovie.trimOutPoint != undefined && videoMovie.trimInPoint != undefined)			{				var thePlayheadLocation = videoMovie.time; //video_mc.getCurrentTime();				MonsterDebugger.trace(this, "Playhead location: " + thePlayheadLocation, "Trim Debug")				if(thePlayheadLocation)				{					if(thePlayheadLocation >= videoMovie.trimOutPoint)					{						videoMovie.hardSeekVideo(videoMovie.trimInPoint, true);					}				}			}		}				/**		*		* Returns the video time data as an object		* @param void		* @return String		**/		public function getTimeData():Object		{		    return {"duration":videoMovie.duration, "currentTime":videoMovie.time, "playing": videoMovie.currentState == "playing"};		}	}}